import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import sqlite3
import importlib.util
from .notifications import update_order_status, get_order_by_id

load_dotenv()
ADMIN_BOT_TOKEN = os.getenv('ADMIN_BOT_TOKEN')
DB_PATH = os.getenv('DB_PATH')

if not ADMIN_BOT_TOKEN:
    raise RuntimeError("ADMIN_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

bot = Bot(token=ADMIN_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —É—Å–ª—É–≥–∏
def load_materials_and_extras():
    spec = importlib.util.spec_from_file_location('materials', 'bot/materials.py')
    materials_mod = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(materials_mod)
    return materials_mod.MATERIALS, materials_mod.EXTRAS

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üîß –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ")],
        [KeyboardButton(text="üí∞ –ü—Ä–∞–π—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")],
        [KeyboardButton(text="üõ†Ô∏è –ü—Ä–∞–π—Å —É—Å–ª—É–≥")],
        [KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    print(f"–ê–¥–º–∏–Ω-–±–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer(
        "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

@dp.message(F.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
async def show_all_orders(message: types.Message):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT id, name, phone, address, material, area, extras, date, time, price, status FROM orders ORDER BY id DESC')
    orders = c.fetchall()
    conn.close()
    
    if not orders:
        await message.answer("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    text = "üìã –í—Å–µ –∑–∞—è–≤–∫–∏:\n\n"
    for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        status_emoji = {
            '–Ω–æ–≤–∞—è': 'üÜï',
            '–≤ —Ä–∞–±–æ—Ç–µ': 'üîß',
            '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è': '‚úÖ'
        }.get(order[10], '‚ùì')
        
        text += f"{status_emoji} <b>–ó–∞—è–≤–∫–∞ #{order[0]}</b>\n"
        text += f"üë§ {order[1]}\n"
        text += f"üìû {order[2]}\n"
        text += f"üìç {order[3]}\n"
        text += f"üèóÔ∏è {order[4]} ({order[5]} –º¬≤)\n"
        text += f"üí∞ {order[9]} ‚ÇΩ\n"
        text += f"üìÖ {order[7]}\n"
        text += f"‚è∞ {order[8] if order[8] else '-'}\n"
        text += f"üîß {order[6] if order[6] else '–Ω–µ—Ç'}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {order[10]}\n"
        text += "‚îÄ" * 30 + "\n"
    
    if len(orders) > 10:
        text += f"\n... –∏ –µ—â–µ {len(orders) - 10} –∑–∞—è–≤–æ–∫"
    
    await message.answer(text, parse_mode='HTML')

@dp.message(F.text == "üîß –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ")
async def show_orders_in_work(message: types.Message):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT id, name, phone, address, material, area, extras, date, time, price FROM orders WHERE status = "–≤ —Ä–∞–±–æ—Ç–µ" ORDER BY id DESC')
    orders = c.fetchall()
    conn.close()
    
    if not orders:
        await message.answer("üîß –ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ –Ω–µ—Ç")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π
    for order in orders:
        text = f"üîß <b>–ó–∞—è–≤–∫–∞ #{order[0]}</b>\n"
        text += f"üë§ {order[1]}\n"
        text += f"üìû {order[2]}\n"
        text += f"üìç {order[3]}\n"
        text += f"üèóÔ∏è {order[4]} ({order[5]} –º¬≤)\n"
        text += f"üí∞ {order[9]} ‚ÇΩ\n"
        text += f"üìÖ {order[7]}\n"
        text += f"‚è∞ {order[8] if order[8] else '-'}\n"
        text += f"üîß {order[6] if order[6] else '–Ω–µ—Ç'}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{order[0]}")]
        ])
        
        await message.answer(text, parse_mode='HTML', reply_markup=keyboard)

@dp.message(F.text == "üí∞ –ü—Ä–∞–π—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
async def show_materials_price(message: types.Message):
    MATERIALS, _ = load_materials_and_extras()
    
    text = "üí∞ <b>–ü—Ä–∞–π—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>\n\n"
    for material, price in MATERIALS.items():
        text += f"üèóÔ∏è <b>{material}</b>\n"
        text += f"üíµ {price} ‚ÇΩ/–º¬≤\n"
        text += "‚îÄ" * 20 + "\n"
    
    await message.answer(text, parse_mode='HTML')

@dp.message(F.text == "üõ†Ô∏è –ü—Ä–∞–π—Å —É—Å–ª—É–≥")
async def show_services_price(message: types.Message):
    _, EXTRAS = load_materials_and_extras()
    
    text = "üõ†Ô∏è <b>–ü—Ä–∞–π—Å —É—Å–ª—É–≥</b>\n\n"
    for service, price in EXTRAS.items():
        text += f"üîß <b>{service}</b>\n"
        text += f"üíµ {price} ‚ÇΩ\n"
        text += "‚îÄ" * 20 + "\n"
    
    await message.answer(text, parse_mode='HTML')

@dp.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏")
async def manage_contractors(message: types.Message):
    # –ó–∞–≥–ª—É—à–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    await message.answer(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏</b>\n\n"
        "üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∑–∞—è–≤–æ–∫.",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@dp.message()
async def handle_all_messages(message: types.Message):
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
    print(f"üìù –¢–µ–∫—Å—Ç: {message.text}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} {message.from_user.last_name or ''}")
    print(f"üè∑Ô∏è –¢–∏–ø —á–∞—Ç–∞: {message.chat.type}")
    print("‚îÄ" * 50)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith("accept_"))
async def accept_order(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    await update_order_status(order_id, "–≤ —Ä–∞–±–æ—Ç–µ")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    order = await get_order_by_id(order_id)
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    if order:
        text = f"""
‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É</b>

üë§ –ö–ª–∏–µ–Ω—Ç: {order['name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}
üìç –ê–¥—Ä–µ—Å: {order['address']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order['price']} ‚ÇΩ
"""
        await callback.message.answer(text, parse_mode='HTML')
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

@dp.callback_query(F.data.startswith("contract_"))
async def contract_order(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    order = await get_order_by_id(order_id)
    
    await callback.answer("üì§ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –ø–æ–¥—Ä—è–¥!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –æ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–∞ –ø–æ–¥—Ä—è–¥
    if order:
        text = f"""
üì§ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –ø–æ–¥—Ä—è–¥</b>

üë§ –ö–ª–∏–µ–Ω—Ç: {order['name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}
üìç –ê–¥—Ä–µ—Å: {order['address']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order['price']} ‚ÇΩ

üîß <i>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>
"""
        await callback.message.answer(text, parse_mode='HTML')
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

@dp.callback_query(F.data.startswith("complete_"))
async def complete_order(callback: types.CallbackQuery):
    print(f"üîî –ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    order_id = callback.data.split("_")[1]
    print(f"üìã ID –∑–∞—è–≤–∫–∏: {order_id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
    await update_order_status(order_id, "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è")
    print("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    order = await get_order_by_id(order_id)
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    if order:
        text = f"""
‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üë§ –ö–ª–∏–µ–Ω—Ç: {order['name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}
üìç –ê–¥—Ä–µ—Å: {order['address']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order['price']} ‚ÇΩ
"""
        await callback.message.answer(text, parse_mode='HTML')
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)
    print("üéØ Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")

async def main():
    print("üöÄ –ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üîë –¢–æ–∫–µ–Ω: {ADMIN_BOT_TOKEN[:10]}...")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    print("üì° –ù–∞—á–∏–Ω–∞–µ–º polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 