import os
from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import sqlite3

load_dotenv()
ADMIN_BOT_TOKEN = os.getenv('ADMIN_BOT_TOKEN')
DB_PATH = os.getenv('DB_PATH')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', '1904520384')  # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

async def send_new_order_notification(order_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    if not ADMIN_BOT_TOKEN:
        return
    
    admin_bot = Bot(token=ADMIN_BOT_TOKEN)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"accept_{order_data.get('id')}"),
            InlineKeyboardButton(text="üì§ –û—Ç–¥–∞—Ç—å –Ω–∞ –ø–æ–¥—Ä—è–¥", callback_data=f"contract_{order_data.get('id')}")
        ]
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    extras = ', '.join(order_data.get('extras', [])) if order_data.get('extras') else '–Ω–µ—Ç'
    text = f"""
üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_data.get('id')}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data.get('name')}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_data.get('phone')}
üìç <b>–ê–¥—Ä–µ—Å:</b> {order_data.get('address')}

üèóÔ∏è <b>–†–∞–±–æ—Ç–∞:</b>
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: {order_data.get('material')}
‚Ä¢ –ü–ª–æ—â–∞–¥—å: {order_data.get('area')} –º¬≤
‚Ä¢ –î–æ–ø. —Ä–∞–±–æ—Ç—ã: {extras}

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order_data.get('price')} ‚ÇΩ

üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ—Ä–∞:</b> {order_data.get('date')}
‚è∞ <b>–í—Ä–µ–º—è:</b> {order_data.get('time') if order_data.get('time') else '-'}

üì∏ <b>–§–æ—Ç–æ:</b> {'–µ—Å—Ç—å' if order_data.get('photos') else '–Ω–µ—Ç'}
"""
    
    try:
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {ADMIN_CHAT_ID}")
        await admin_bot.send_message(
            chat_id=int(ADMIN_CHAT_ID),  # ID –∞–¥–º–∏–Ω-—á–∞—Ç–∞
            text=text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        photos = order_data.get('photos', [])
        for photo in photos:
            try:
                with open(f'database/uploads/{photo}', 'rb') as f:
                    await admin_bot.send_photo(int(ADMIN_CHAT_ID), f)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        print(f"–¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω-–±–æ—Ç–∞: {ADMIN_BOT_TOKEN[:10]}...")
        print(f"ID —á–∞—Ç–∞: {ADMIN_CHAT_ID}")
    finally:
        await admin_bot.session.close()

async def update_order_status(order_id, new_status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {order_id} –Ω–∞ '{new_status}'")
    print(f"üìÅ –ü—É—Ç—å –∫ –ë–î: {DB_PATH}")
    
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        c.execute('SELECT status FROM orders WHERE id = ?', (order_id,))
        current_status = c.fetchone()
        print(f"üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status[0] if current_status else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        c.execute('UPDATE orders SET status = ? WHERE id = ?', (new_status, order_id))
        rows_affected = c.rowcount
        print(f"üìä –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {rows_affected}")
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        if 'conn' in locals():
            conn.close()

async def get_order_by_id(order_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT id, name, phone, address, material, area, extras, photos, date, time, price, status FROM orders WHERE id = ?', (order_id,))
    order = c.fetchone()
    conn.close()
    
    if order:
        return {
            'id': order[0],
            'name': order[1],
            'phone': order[2],
            'address': order[3],
            'material': order[4],
            'area': order[5],
            'extras': order[6].split(', ') if order[6] else [],
            'photos': order[7].split(', ') if order[7] else [],
            'date': order[8],
            'time': order[9],
            'price': order[10],
            'status': order[11]
        }
    return None 