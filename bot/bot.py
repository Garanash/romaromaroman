import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile, InputMediaPhoto
from aiogram.filters import Command
from dotenv import load_dotenv
from pathlib import Path

# –Ø–≤–Ω–æ –≥—Ä—É–∑–∏–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
load_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')

BOT_TOKEN = os.getenv('BOT_TOKEN')
print('DEBUG BOT_TOKEN:', BOT_TOKEN)
if not BOT_TOKEN or not BOT_TOKEN.startswith('7'):
    raise RuntimeError('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ activate_bot.sh')

from .fsm_handlers import router as fsm_router

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(fsm_router)

@dp.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
    await message.answer('–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç')
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ bot/photos
    photos_dir = os.path.join(os.path.dirname(__file__), 'photos')
    photo_files = sorted([f for f in os.listdir(photos_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–∞–∂–∞–º–∏ –ø–æ 10 —Ñ–æ—Ç–æ
    batch_size = 10
    for i in range(0, len(photo_files), batch_size):
        batch = photo_files[i:i+batch_size]
        media = []
        for fname in batch:
            path = os.path.join(photos_dir, fname)
            media.append(InputMediaPhoto(media=FSInputFile(path)))
        await message.answer_media_group(media)
    # –î–∞–ª–µ–µ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/–∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏
    user = message.from_user
    full_name = (user.first_name or '') + (' ' + user.last_name if user.last_name else '')
    phone = None
    if full_name.strip():
        await state.update_data(name=full_name.strip())
        greet = f'üëã –ü—Ä–∏–≤–µ—Ç, {full_name.strip()}!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –º–∞—Å—Ç–µ—Ä –†–æ–º–∞–Ω –∏ —è –¥–µ–ª–∞—é –ø–æ—Ç–æ–ª–∫–∏ —É–∂–µ –º–Ω–æ–≥–æ –ª–µ—Ç, –º–æ–≥—É –∏—Å–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.'
        await message.answer(greet, reply_markup=ReplyKeyboardRemove())
        await message.answer('–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–º–µ—Ä –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):')
        from .states import OrderFSM
        await state.set_state(OrderFSM.phone)
    else:
        await message.answer(
            'üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –º–∞—Å—Ç–µ—Ä –†–æ–º–∞–Ω –∏ —è –¥–µ–ª–∞—é –ø–æ—Ç–æ–ª–∫–∏ —É–∂–µ –º–Ω–æ–≥–æ –ª–µ—Ç, –º–æ–≥—É –∏—Å–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å (–Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è).',
            reply_markup=ReplyKeyboardRemove()
        )
        from .states import OrderFSM
        await state.set_state(OrderFSM.name)

if __name__ == '__main__':
    import asyncio
    asyncio.run(dp.start_polling(bot)) 